<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.smart.mapper.SmtComplainMapper">
    
    <resultMap type="SmtComplain" id="SmtComplainResult">
        <result property="complainId"    column="complain_id"    />
        <result property="ownerId"    column="owner_id"    />
        <result property="title"    column="title"    />
        <result property="content"    column="content"    />
        <result property="remark"    column="remark"    />
        <result property="status"    column="status"    />
        <result property="delFlag"    column="del_flag"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateBy"    column="update_by"    />
        <result property="updateTime"    column="update_time"    />
        <association property="owner" javaType="SysUser">
            <id     property="userId"       column="user_id"      />
            <result property="userName"     column="user_name"    />
            <result property="nickName"     column="nick_name"    />
            <result property="email"        column="email"        />
            <result property="phonenumber"  column="phonenumber"  />
            <result property="sex"          column="sex"          />
        </association>
    </resultMap>

    <sql id="selectSmtComplainVo">
        select complain_id,owner_id, title, content, remark, status, del_flag, create_by, create_time, update_by, update_time from smt_complain
    </sql>

    <select id="selectSmtComplainList" parameterType="SmtComplain" resultMap="SmtComplainResult">
        <!--<include refid="selectSmtComplainVo"/>-->
        select
            sc.complain_id,
            sc.owner_id,
            sc.title,
            sc.content,
            sc.remark,
            sc.status,
            sc.del_flag,
            sc.create_by,
            sc.create_time,
            sc.update_by,
            sc.update_time,
            su.user_id,
            su.user_name,
            su.nick_name,
            su.sex,
            su.email,
            su.phonenumber
        from smt_complain sc
        left join sys_user su on su.user_id = sc.owner_id
        <where>  
            <if test="title != null  and title != ''"> and sc.title = #{title}</if>
            <if test="content != null  and content != ''"> and sc.content = #{content}</if>
            <if test="status != null  and status != ''"> and sc.status = #{status}</if>
            <if test="ownerId != null "> and sc.owner_id = #{ownerId}</if>
        </where>
    </select>
    
    <select id="selectSmtComplainByComplainId" parameterType="Long" resultMap="SmtComplainResult">
        <include refid="selectSmtComplainVo"/>
        where complain_id = #{complainId}
    </select>

    <insert id="insertSmtComplain" parameterType="SmtComplain" useGeneratedKeys="true" keyProperty="complainId">
        insert into smt_complain
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="ownerId != null "> owner_id,</if>
            <if test="title != null and title != ''">title,</if>
            <if test="content != null">content,</if>
            <if test="remark != null">remark,</if>
            <if test="status != null">status,</if>
            <if test="delFlag != null">del_flag,</if>
            <if test="createBy != null">create_by,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateBy != null">update_by,</if>
            <if test="updateTime != null">update_time,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="ownerId != null "> #{ownerId},</if>
            <if test="title != null and title != ''">#{title},</if>
            <if test="content != null">#{content},</if>
            <if test="remark != null">#{remark},</if>
            <if test="status != null">#{status},</if>
            <if test="delFlag != null">#{delFlag},</if>
            <if test="createBy != null">#{createBy},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateBy != null">#{updateBy},</if>
            <if test="updateTime != null">#{updateTime},</if>
         </trim>
    </insert>

    <update id="updateSmtComplain" parameterType="SmtComplain">
        update smt_complain
        <trim prefix="SET" suffixOverrides=",">
            <if test="ownerId != null ">  owner_id = #{ownerId},</if>
            <if test="title != null and title != ''">title = #{title},</if>
            <if test="content != null">content = #{content},</if>
            <if test="remark != null">remark = #{remark},</if>
            <if test="status != null">status = #{status},</if>
            <if test="delFlag != null">del_flag = #{delFlag},</if>
            <if test="createBy != null">create_by = #{createBy},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
        </trim>
        where complain_id = #{complainId}
    </update>

    <delete id="deleteSmtComplainByComplainId" parameterType="Long">
        delete from smt_complain where complain_id = #{complainId}
    </delete>

    <delete id="deleteSmtComplainByComplainIds" parameterType="String">
        delete from smt_complain where complain_id in 
        <foreach item="complainId" collection="array" open="(" separator="," close=")">
            #{complainId}
        </foreach>
    </delete>
</mapper>